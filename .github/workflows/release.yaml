name: release

on:
  workflow_dispatch: # testing only, trigger manually to test it works
  push:
    branches:
      - main
    tags:
      - "v*"

permissions:
  actions: read # for detecting the Github Actions environment.
  packages: read # for reading from GHCR

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}
      image: ${{ steps.hash.outputs.image }}
      digest: ${{ steps.hash.outputs.digest }}
    permissions:
      packages: write # To publish container images to GHCR
      id-token: write # To use our OIDC token
      contents: write # To upload assets to release
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          persist-credentials: false
      - name: Login to GitHub Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version-file: 'go.mod'
          cache: false

      - name: Install cosign
        uses: sigstore/cosign-installer@398d4b0eeef1380460a10c8013a76f728fb906ac # main
      - name: Install syft
        uses: anchore/sbom-action/download-syft@cee1b8e05ae5b2593a75e197229729eabaa9f8ec # v0.20.2

      # - name: Run GoReleaser Snapshot
      #   if: ${{ !startsWith(github.ref, 'refs/tags/') }}
      #   id: run-goreleaser-snapshot
      #   uses: goreleaser/goreleaser-action@9c156ee8a17a598857849441385a2041ef570552 # v6.3.0
      #   with:
      #     distribution: goreleaser
      #     version: latest
      #     args: release --clean --snapshot --skip=sign
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     GORELEASER_CURRENT_TAG: v0.0.0-snapshot-tag
      #     DOCKER_CONTEXT: default
      - name: Run GoReleaser Release
        # if: startsWith(github.ref, 'refs/tags/')
        id: run-goreleaser-release
        uses: goreleaser/goreleaser-action@e435ccd777264be153ace6237001ef4d979d3a7a # v6.4.0
        # uses: goreleaser/goreleaser-action@9c156ee8a17a598857849441385a2041ef570552 # v6.3.0
        with:
          distribution: goreleaser
          version: latest
          args: 'release --clean'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCKER_CONTEXT: default

      - name: Generate hashes and extract image digest
        id: hash
        if: startsWith(github.ref, 'refs/tags/')
        env:
          ARTIFACTS: "${{ steps.run-goreleaser-release.outputs.artifacts }}"
        run: |
          set -euo pipefail

          hashes=$(echo $ARTIFACTS | jq --raw-output '.[] | {name, "digest": (.extra.Digest // .extra.Checksum)} | select(.digest) | {digest} + {name} | join("  ") | sub("^sha256:";"")' | base64 -w0)
          if test "$hashes" = ""; then # goreleaser < v1.13.0
            checksum_file=$(echo "$ARTIFACTS" | jq -r '.[] | select (.type=="Checksum") | .path')
            hashes=$(cat $checksum_file | base64 -w0)
          fi
          echo "hashes=$hashes" >> $GITHUB_OUTPUT

          image=$(echo $ARTIFACTS | jq --raw-output '.[] | select( .type =="Docker Manifest" ).name | split(":")[0]')
          echo "image=$image" >> $GITHUB_OUTPUT
          digest=$(echo $ARTIFACTS | jq --raw-output '.[] | select( .type =="Docker Manifest" ).extra.Digest')
          echo "digest=$digest" >> $GITHUB_OUTPUT

  # sbom-container:
  #   # generate sbom for container as goreleaser can't - https://goreleaser.com/customization/sbom/#limitations
  #   name: generate sbom for container
  #   runs-on: ubuntu-latest
  #   needs: [goreleaser]
  #   if: startsWith(github.ref, 'refs/tags/')
  #   permissions:
  #     id-token: write # needed for signing the images with GitHub OIDC Token
  #     packages: write # needed to upload signatures
  #     contents: write # To upload assets to release
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # tag=v3
  #       with:
  #         persist-credentials: false
  #     - name: Login to GitHub Container Registry
  #       uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Run Trivy in fs mode to generate SBOM
  #       uses: aquasecurity/trivy-action@dc5a429b52fcf669ce959baa2c2dd26090d2a6c4 # master
  #       with:
  #         scan-type: "fs"
  #         format: "spdx-json"
  #         output: "spdx.sbom.json"
  #     - name: Install cosign
  #       uses: sigstore/cosign-installer@398d4b0eeef1380460a10c8013a76f728fb906ac # main
  #     - name: Sign image and sbom
  #       run: |
  #         #!/usr/bin/env bash
  #         set -euo pipefail
  #         cosign attach sbom --sbom spdx.sbom.json ${IMAGE_URI_DIGEST}
  #         cosign sign -a git_sha=$GITHUB_SHA --attachment sbom ${IMAGE_URI_DIGEST} --yes
  #       shell: bash
  #       env:
  #         IMAGE_URI_DIGEST: ${{ needs.goreleaser.outputs.image }}@${{ needs.goreleaser.outputs.digest }}

  provenance-bins:
    name: generate provenance for binaries
    needs: [goreleaser]
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      id-token: write # To sign the provenance
      contents: write # To upload assets to release
      actions: read # To read the workflow path
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.1.0 # must use semver here
    with:
      base64-subjects: "${{ needs.goreleaser.outputs.hashes }}"
      upload-assets: true

  # provenance-container:
  #   name: generate provenance for container
  #   needs: [goreleaser]
  #   if: startsWith(github.ref, 'refs/tags/')
  #   permissions:
  #     id-token: write # To sign the provenance
  #     contents: write # To upload assets to release
  #     packages: write # To publish container images to GHCR
  #     actions: read # To read the workflow path
  #   uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.1.0 # must use semver here
  #   with:
  #     image: ${{ needs.goreleaser.outputs.image }}
  #     digest: ${{ needs.goreleaser.outputs.digest }}
  #     registry-username: ${{ github.actor }}
  #   secrets:
  #     registry-password: ${{ secrets.GITHUB_TOKEN }}
